% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sequential.R
\name{seqProb}
\alias{seqProb}
\title{Sequential probabilities}
\usage{
seqProb(
  up,
  lo = rep(-Inf, length(up)),
  tau = seq_along(up)/length(up),
  mean = 0,
  sd = 1/sqrt(tau),
  hasZbounds = TRUE,
  exitLast = FALSE,
  alg = mvtnorm::Miwa()
)
}
\arguments{
\item{up}{\code{numeric} upper bounds}

\item{lo}{\code{numeric} lower bounds}

\item{tau}{\code{numeric} vector of monotonely increasing information times}

\item{mean}{\code{numeric} the mean}

\item{sd}{\code{numeric} vector of standard deviations}

\item{hasZbounds}{\code{logical} if true, bounds are assumed to be standardized
already, otherwise they will be standardized by the function.}

\item{exitLast}{\code{logical} if TRUE, upper bound at the last stage is set to
\code{Inf}, and lower bound to user-specified upper bound, which means to
compute the probability to stay below the upper bounds in all stages except
the last stage. In a sequential study design this corresponds to accepting
the null hypothesis in stages 1 to n-1 but rejecting it at stage n, i.e.,
the probability to exit the study just at stage n.}

\item{alg}{\verb{algorithm object} to be used for numerical integration (see
\link[mvtnorm:pmvnorm]{mvtnorm::pmvnorm}).}
}
\value{
\code{numeric} calculated (multivariate) normal probability to stay
between bounds, or (if exitLast was set to TRUE) to stay between bounds
and exceed upper bound at last stage.
}
\description{
Compute sequential probabilities based on normally distributed
test statistics and assuming independent increments.
}
\examples{
# 1-D
pnorm(0)               == seqProb(0)                                   # TRUE
pnorm(1, mean=1)       == seqProb(1, mean=1)                           # TRUE
pnorm(2, mean=1, sd=2) == seqProb(2, mean=1, sd=2, hasZbounds=FALSE)   # TRUE
seqProb(-Inf)                                        # 0
seqProb(Inf)                                         # 1
seqProb(qnorm(.95))                                  # .95
seqProb(qnorm(.95), exitLast=TRUE)                   # 1-.95

# Multivariate
seqProb(c(Inf, 0)) == seqProb(0)                       # TRUE
p <- seqProb(c(2, 1), mean=0)
seqProb(c(2, 1), mean=0, tau=c(.25, 0.5)) == p         # TRUE
seqProb(c(2, 1), mean=0, tau=c(.25, 1)) == p           # FALSE
}
\seealso{
\code{\link[mvtnorm:pmvnorm]{mvtnorm::pmvnorm()}}
}
